using UnityEngine;
using UnityEngine.TestTools;
using NUnit.Framework;
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;

using GameDevWare.Serialization;
using com.fpnn;
using com.rum;

public class Test_Debug {

    [SetUp]
    public void SetUp() {}

    [TearDown]
    public void TearDown() {}

    [UnityTest]
    public IEnumerator Debug_HexString() {

        // string hex_str

        // int len = hex_str.Length / 2;
        // byte[] bytes = new byte[len];

        // string hex;
        // int j = 0;
        // for (int i = 0; i < bytes.Length; i++) {
        //     hex = new String(new Char[] { hex_str[j], hex_str[j + 1] });
        //     bytes[i] = byte.Parse(hex, System.Globalization.NumberStyles.HexNumber);
        //     j = j + 2;
        // }
        // Debug.Log("len:" + bytes.Length + ", str10: " + System.Text.Encoding.UTF8.GetString(bytes));
        

        // string path = "/Users/di.zhao/Desktop/data.bytes";
        // using (FileStream fs = new FileStream(path, FileMode.Create, FileAccess.Write)) {

        //     fs.Write(bytes, 0, bytes.Length);
        // }
        // Debug.Log("check the bytes file: " + path);

        yield return null;
    }

    [UnityTest]
    public IEnumerator Debug_WriteFile() {

        // byte[] bytes = new byte[0];

        // string path = "/Users/di.zhao/Desktop/data.bytes";
        // using (FileStream fs = new FileStream(path, FileMode.Create, FileAccess.Write)) {

        //     fs.Write(bytes, 0, bytes.Length);
        // }
        // Debug.Log("check the bytes file: " + path);

        yield return null;
    }

    [UnityTest]
    public IEnumerator Debug_MsgPack_Deserialize() {

        // IDictionary<string, object> payload = null;

        // try {

        //     using (MemoryStream inputStream = new MemoryStream(bytes)) {

        //         payload = MsgPack.Deserialize<IDictionary<string, object>>(inputStream);
        //     }
        // } catch (Exception ex) {

        //     Debug.LogError(ex);
        // }

        // Debug.Log(Json.SerializeToString(payload));

        yield return null;
    }

    [UnityTest]
    public IEnumerator Debug_MsgPack_Serialize() {

        // byte[] bytes = new byte[0];
        // IDictionary<string, object> payload = null;

        // try {

        //     using (MemoryStream outputStream = new MemoryStream()) {

        //         MsgPack.Serialize(payload, outputStream);
        //         outputStream.Seek(0, SeekOrigin.Begin);

        //         bytes = outputStream.ToArray();
        //     }
        // } catch (Exception ex) {

        //     Debug.LogError(ex);
        // }

        // Debug.Log("bytes len: " + bytes.Length);

        yield return null;
    }
}
